As this homework does not contain security in the grading schedule(80 mapped out points do not mention it at all), expectedly this code is not secure in many terms. To begin with, when the connection is to be established between UPS and Amazon, there is no authentication whether who connects is Amazon or not!(as we simply listen on a given port, and expect Amazon to connect). To improve this further, this part needs to be set to begin with. 
Another issue with Amazon connection is the worldid. Due to the design specification, the worldid is not given as a message when the connection is established, but rather \'91verbally\'92 being told which world to connect. This is obviously not a good design choice, and which can be exploited when the worldid is being shared as message. 
One of the most obvious attacks that can be established is Man in the middle attack. Connection with Amazon(and the world too) is done simply on sockets, which is not enough to protect against passive/active MITM attacks. In order to further improve the security against MITM attacks, some sort of secure connection should be established between UPS-Amazon and UPS-World. Examples could be XXXX(What could it be, ssh, HTTP CONNECT?)
Other than what default security Django or SQLAlchemy provides, we are not checking against Buffer Overflow/SQL injection attacks. As SQLAlchemy is evoked with connections from the world&amazon solely, Django\'92s interaction with the database would potentially be a weak-spot against attackers. Same can be said for command injection, however as the code is running as daemon this would not be a big issue. 
Cross site scripting is not to be worried about, as the user cannot provide a hyperlink for other users to see anyway. 

As good design choices, Django standard libraries to handle user authentication. 
We have also divided the Docker containers for backend and frontend. That confides with the Defense in Depth standards, as if a security breach happens only one layer would be compromised, rather than both of them. 
Again to further strengthen the Defense-in-Depth, there is bare minimum amount of interaction between the front-end and the back-end directly. Indirect interaction happens through the shared database.
